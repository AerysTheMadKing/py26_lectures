
"==================================== Тип данных - list(Листы) =================)"
#list - это изменяемый тип данных , который представляет  с собой коллекцию какой либо последовательности.


# list_ = [ 12,23,True, False [12, "astr"], "str", None, [12,[]]]

# #index y list

# list_ = [1,2,8,10]
# print(list_[2]) #8
# print(list_[1::2])#[2,10] срез

# list_ = [10,5,2,10,[0,0,0,1,0]]
# print(list_[4][3])# 1

# str_ = "helloworld"
# list_ = list(str_) #list()- Функция
# print(list_) #['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']

# list_ = [1,2,3,4,5,20, True, False, None, "str"]
# list_len = len(list_) #10 len - Функция для подсчета элементов
# print(list_len) #10

'=============================================Тип данных - Tuple(кортеж)========================================'
#tuple - это не изменяемый тип данных, являюхщийся последовательностью элементов, литералами являются запятые и 
# круглые скобки

# tuple_= 1,2,3,4,5,6 #tuple - это круглые скобки
# list_ = [1,2,3,4] #list - это квадратные скобки
# print(tuple_)
# print(list_)



'=============================================== Range ================================================================'
#range(start, end, step) - это генератор последовательности
#в новой версии питона это тип данных


# range_ = range(0,11)
# print(list(range_))#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] list()
# print(tuple(range_))#(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) tuple()



'============================================== Циклы(for, while) ================================================='

'FOR'

#for - это циклы который работает до конца итерируемого обьекта 
#While -  это цикл, который работает пока условие True


# meshok = ['potate', 'tomato', 'onion']

# kastrula = []

# for ovoshi  in meshok:
#     print(ovoshi)
#     kastrula.append(ovoshi)


#     print(kastrula)




# for i in range(0,11):#[0,1,2,3,4,5,6,7,8,9,10]
#     print(i**2) # 0,1,4,9,16,25.....



# for i in "makers bootcamp":
#     print(f'Это буква {i}') 
# Это буква m
# Это буква a
# Это буква k
# Это буква e
# Это буква r
# Это буква s
# Это буква  
# Это буква b
# Это буква o
# Это буква o
# Это буква t
# Это буква c
# Это буква a
# Это буква m
# Это буква p




"WHILE"

# i = 1
# while i<12:
#     print(f'hello world, это {i} итерация')
#     i = i+1

# hello world, это 0 итерация
# hello world, это 1 итерация
# hello world, это 2 итерация
# hello world, это 3 итерация
# hello world, это 4 итерация
# hello world, это 5 итерация
# hello world, это 6 итерация
# hello world, это 7 итерация
# hello world, это 8 итерация
# hello world, это 9 итерация



"BREAK,  CONTINUE"

#break -  это оператор циклов, который ломает цикл и выходит из нее
#continue - это оператор циклов, который пропускает итерацию

"BREAK"

# i = 0
# while True:
#     if i==5:
#         break
#     print(f'hello world, это {i} итерация')
#     i = i+1





"CONTINUE"


# i = 0
# while i<5:
#     i = i+1
#     if i == 2:
#         continue
#     print(f'hello world, это {i} итерация')




"==================================================================================="


# for i in range(11):
#     if i == 5:
#         break # ломает цикл и заканчивает его кода i == 5
#     print(f'это {i} итерация')



# for i in range(11):
#     if i == 5:
#         continue # пропускает итерацию когда i == 5  и продолжает работу цикла
#     print(f'это {i} итерация')



"=================================== Методы list(списков) =================================="

#print(dir(list)) # dir(list) - это функция для просмотра методов листа


"APPEND()"

#list.append(element) - это метод листов, который добавляет указанный элемент в конец листа

# list_ = []
# for i in range (0,11,2):
#     list_.append(i)
#     print(list_)



# list_ = []
 # for i in range (11): # [0,1,2,3,4,5,6,7,8,9,10]

#     if i % 2 ==0:
#         list_.append(True)
    
    
#     else:
#         list_.append(False)

#         print(list_) # [True, False, True, False, True, False, True, False, True, False]



"==================================================================="

# list_ = [1, 2,3,4,5, True, False, None, 'Askar']
# list_.append("Anton")
# print(list_)  #[1, 2, 3, 4, 5, True, False, None, 'Askar', 'Anton']

'------------------------------------------------------------------'


"EXTEND()"
#list_1.extend(list_) - это метод листов, который расширяет первый лист засчет второго листа


# list_1 = [1,2,3]
# list_2 = [4,5,6]

# list_1.append(list_2)
# print(list_1) # [1, 2, 3, [4, 5, 6]]

# list_1 = [1,2,3]
# list_2 = [4,5,6]


# list_1.extend(list_2)
# print((list_1)) # [1, 2, 3, 4, 5, 6]



"-------------------------------------------------------------------------------"

"INSERT()"

#list.insert(index, element) -  это метод листов, который на место index добавляет element.

# list_ = [0,0,0,0,0,0,0,0,0,0,0]

# list_.insert(5, True)

# print(list_)  # [0, 0, 0, 0, 0, True, 0, 0, 0, 0, 0, 0]


"------------------------------------------------------------------------------"


# list_ = [21, 34 ,45,"makers", [1,2,3,4,5,10]]

# list_[6].insert(4, "Hello")

# print(list_)

"---------------------------------------------------------------------------"

"INDEX()"


#list.index(element, start, end) - это метод листов который находит индекс указанного элемента

# list_ = ["NYC", "Moscow", "Bishkek", "Osh"]

# for city in list_:
#     print(f'Город - {city} под индексом {list_.index(city)}')


"----------------------------------------------------------------------------------"


"POP"

#list.pop(index) - это метод листов, который удаляет и возвращает элемент по указанному индексу,
#если не указать, он удалит последний элемент.


# list_ = [1,2,3,12,123,43,12,4,5]

# pop_element = list_.pop(5)

# print(list_)
# print(pop_element)  # [1, 2, 3, 123, 43, 12, 4, 5] # 12


"----------------------------------------------------------------------------------"


# list_ = [1,2,3,12,123,43,12,4,5]

# pop_element = list_.pop() # Удалить последнюю # 5 

# print(list_)
# print(pop_element)


"-----------------------------------------------------------------------------------"


"REMOVE()"

#list.remove(element) - это метод листов, для удаления какого либо элемента, если такого элемента нет то выйдет ошибка.


# list_ = [1,(),2,3,1,4,5,6,7]
# list_.remove(())
# print(list_)  # [1, 2, 3, 4, 5, 7]


"========================================================================================="

"SORT()"

# list_.sort(key, reverse) - это метод листов, для сортировки его элементов.


# list_ = ["Sultan", "Sanjar", "Aigerim", "Erkayim"]

# list_.sort(key=len, reverse = True)

# print(list_)


"--------------------------------------------------------------------------------------------"


# list_ = [1,23,45,2,4,6,68]

# list_.sort()

# print(list_)  # [1, 2, 4, 6, 23, 45, 68]



"-------------------------------------------------------------------------------------------------"


"COUNT()"


#lsit.count(element) - это метод листов, который счетает сколько element есть в листе.


# list_ = [1, 2, 12, 421, 4214, 21, 421, 421, 421, 412, 4, 24, 21]

# count_list = list_.count(421) # 4 раза встречает строка 421 в этом листе
# print(count_list)



"--------------------------------------------------------------------------------------------------"


"COPY(),  DEEPCOPY()"


#list.copy() -  это метод листов, который копирует лист  поверхностно

#copy.deepcopy(list) -  это метод листов, который копирует лист углубленно



# list_ = [1, 2, 3, 4, 5]

# copy_list = list_.copy()

# print(list_)
# print(copy_list)


"----------------------------------------------------------------------------------------------------------"

import copy 


# list_1 = [1, 2, 3, 4, 5]

# copy_list = copy.deepcopy(list_1)

# print(list_1)  #[1, 2, 3, 4, 5]
# print(copy_list)  #[1, 2, 3, 4, 5]


# list_1 = [1, 2, 3, 4, 5]

# copy_list = copy.deepcopy(list_1)


# print(list_1)  #[1, 2, 3, 4, 5]
# print(copy_list)



"---------------------------------------------------------------------------------"


"REVERSE()"


#list.everse() - это метод листов, который переворачивает лист


# list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# list_.reverse()

# print(list_) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]



